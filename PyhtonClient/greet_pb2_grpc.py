# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import greet_pb2 as greet__pb2


class GreeterStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Greet = channel.unary_unary(
                '/greet.Greeter/Greet',
                request_serializer=greet__pb2.GreetRequest.SerializeToString,
                response_deserializer=greet__pb2.GreetReply.FromString,
                )
        self.CreateKey = channel.unary_unary(
                '/greet.Greeter/CreateKey',
                request_serializer=greet__pb2.RequestCreateKey.SerializeToString,
                response_deserializer=greet__pb2.ReplyCreateKey.FromString,
                )
        self.GreetServerStreaming = channel.unary_stream(
                '/greet.Greeter/GreetServerStreaming',
                request_serializer=greet__pb2.GreetRequest.SerializeToString,
                response_deserializer=greet__pb2.GreetReply.FromString,
                )
        self.GreetClientStreaming = channel.stream_unary(
                '/greet.Greeter/GreetClientStreaming',
                request_serializer=greet__pb2.GreetRequest.SerializeToString,
                response_deserializer=greet__pb2.GreetReply.FromString,
                )
        self.GreetBiDi = channel.stream_stream(
                '/greet.Greeter/GreetBiDi',
                request_serializer=greet__pb2.GreetRequest.SerializeToString,
                response_deserializer=greet__pb2.GreetReply.FromString,
                )


class GreeterServicer(object):
    """The greeting service definition.
    """

    def Greet(self, request, context):
        """Unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GreetServerStreaming(self, request, context):
        """Server Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GreetClientStreaming(self, request_iterator, context):
        """Client Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GreetBiDi(self, request_iterator, context):
        """BiDi 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Greet': grpc.unary_unary_rpc_method_handler(
                    servicer.Greet,
                    request_deserializer=greet__pb2.GreetRequest.FromString,
                    response_serializer=greet__pb2.GreetReply.SerializeToString,
            ),
            'CreateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKey,
                    request_deserializer=greet__pb2.RequestCreateKey.FromString,
                    response_serializer=greet__pb2.ReplyCreateKey.SerializeToString,
            ),
            'GreetServerStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.GreetServerStreaming,
                    request_deserializer=greet__pb2.GreetRequest.FromString,
                    response_serializer=greet__pb2.GreetReply.SerializeToString,
            ),
            'GreetClientStreaming': grpc.stream_unary_rpc_method_handler(
                    servicer.GreetClientStreaming,
                    request_deserializer=greet__pb2.GreetRequest.FromString,
                    response_serializer=greet__pb2.GreetReply.SerializeToString,
            ),
            'GreetBiDi': grpc.stream_stream_rpc_method_handler(
                    servicer.GreetBiDi,
                    request_deserializer=greet__pb2.GreetRequest.FromString,
                    response_serializer=greet__pb2.GreetReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greet.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The greeting service definition.
    """

    @staticmethod
    def Greet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/Greet',
            greet__pb2.GreetRequest.SerializeToString,
            greet__pb2.GreetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/greet.Greeter/CreateKey',
            greet__pb2.RequestCreateKey.SerializeToString,
            greet__pb2.ReplyCreateKey.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GreetServerStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/greet.Greeter/GreetServerStreaming',
            greet__pb2.GreetRequest.SerializeToString,
            greet__pb2.GreetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GreetClientStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/greet.Greeter/GreetClientStreaming',
            greet__pb2.GreetRequest.SerializeToString,
            greet__pb2.GreetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GreetBiDi(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/greet.Greeter/GreetBiDi',
            greet__pb2.GreetRequest.SerializeToString,
            greet__pb2.GreetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
